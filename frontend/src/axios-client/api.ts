/* tslint:disable */
/* eslint-disable */
/**
 * My API
 * API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HistoryGet200Response
 */
export interface HistoryGet200Response {
    /**
     * 
     * @type {string}
     * @memberof HistoryGet200Response
     */
    'baseCurrency'?: string;
    /**
     * 
     * @type {string}
     * @memberof HistoryGet200Response
     */
    'targetCurrency'?: string;
    /**
     * 
     * @type {Array<HistoryGet200ResponseRatesInner>}
     * @memberof HistoryGet200Response
     */
    'rates'?: Array<HistoryGet200ResponseRatesInner>;
}
/**
 * 
 * @export
 * @interface HistoryGet200ResponseRatesInner
 */
export interface HistoryGet200ResponseRatesInner {
    /**
     * 
     * @type {string}
     * @memberof HistoryGet200ResponseRatesInner
     */
    'date': string;
    /**
     * 
     * @type {number}
     * @memberof HistoryGet200ResponseRatesInner
     */
    'rate': number;
}
/**
 * @type HistoryGet400Response
 * @export
 */
export type HistoryGet400Response = HistoryGet400ResponseOneOf | HistoryGet400ResponseOneOf1 | HistoryGet400ResponseOneOf2 | HistoryGet400ResponseOneOf3 | HistoryGet400ResponseOneOf4 | HistoryGet400ResponseOneOf5;

/**
 * 
 * @export
 * @interface HistoryGet400ResponseOneOf
 */
export interface HistoryGet400ResponseOneOf {
    /**
     * 
     * @type {string}
     * @memberof HistoryGet400ResponseOneOf
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface HistoryGet400ResponseOneOf1
 */
export interface HistoryGet400ResponseOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof HistoryGet400ResponseOneOf1
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface HistoryGet400ResponseOneOf2
 */
export interface HistoryGet400ResponseOneOf2 {
    /**
     * 
     * @type {string}
     * @memberof HistoryGet400ResponseOneOf2
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface HistoryGet400ResponseOneOf3
 */
export interface HistoryGet400ResponseOneOf3 {
    /**
     * 
     * @type {string}
     * @memberof HistoryGet400ResponseOneOf3
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface HistoryGet400ResponseOneOf4
 */
export interface HistoryGet400ResponseOneOf4 {
    /**
     * 
     * @type {string}
     * @memberof HistoryGet400ResponseOneOf4
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface HistoryGet400ResponseOneOf5
 */
export interface HistoryGet400ResponseOneOf5 {
    /**
     * 
     * @type {string}
     * @memberof HistoryGet400ResponseOneOf5
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface HistoryGet500Response
 */
export interface HistoryGet500Response {
    /**
     * 
     * @type {string}
     * @memberof HistoryGet500Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface LatestCurrencyGet200Response
 */
export interface LatestCurrencyGet200Response {
    /**
     * 
     * @type {LatestCurrencyGet200ResponseData}
     * @memberof LatestCurrencyGet200Response
     */
    'data'?: LatestCurrencyGet200ResponseData;
}
/**
 * 
 * @export
 * @interface LatestCurrencyGet200ResponseData
 */
export interface LatestCurrencyGet200ResponseData {
    /**
     * 
     * @type {string}
     * @memberof LatestCurrencyGet200ResponseData
     */
    'result'?: string;
    /**
     * 
     * @type {string}
     * @memberof LatestCurrencyGet200ResponseData
     */
    'base_code'?: string;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof LatestCurrencyGet200ResponseData
     */
    'conversion_rates'?: { [key: string]: number; };
}
/**
 * @type LatestCurrencyGet400Response
 * @export
 */
export type LatestCurrencyGet400Response = LatestCurrencyGet400ResponseOneOf | LatestCurrencyGet400ResponseOneOf1;

/**
 * 
 * @export
 * @interface LatestCurrencyGet400ResponseOneOf
 */
export interface LatestCurrencyGet400ResponseOneOf {
    /**
     * 
     * @type {string}
     * @memberof LatestCurrencyGet400ResponseOneOf
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface LatestCurrencyGet400ResponseOneOf1
 */
export interface LatestCurrencyGet400ResponseOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof LatestCurrencyGet400ResponseOneOf1
     */
    'message'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets historical currency data between two dates (inclusive) for two currencies
         * @param {string} startDate Start date for the query, format YYYY-MM-DD
         * @param {string} endDate End date for the query, format YYYY-MM-DD
         * @param {string} baseCurrency Currency that you want to get data for, e.g. USD, EUR
         * @param {string} targetCurrency Currency that you want to get data for, e.g. USD, EUR
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historyGet: async (startDate: string, endDate: string, baseCurrency: string, targetCurrency: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('historyGet', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('historyGet', 'endDate', endDate)
            // verify required parameter 'baseCurrency' is not null or undefined
            assertParamExists('historyGet', 'baseCurrency', baseCurrency)
            // verify required parameter 'targetCurrency' is not null or undefined
            assertParamExists('historyGet', 'targetCurrency', targetCurrency)
            const localVarPath = `/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (baseCurrency !== undefined) {
                localVarQueryParameter['baseCurrency'] = baseCurrency;
            }

            if (targetCurrency !== undefined) {
                localVarQueryParameter['targetCurrency'] = targetCurrency;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets latest currency data
         * @param {string} currency Currency that you want to get data for, e.g. USD, EUR
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        latestCurrencyGet: async (currency: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'currency' is not null or undefined
            assertParamExists('latestCurrencyGet', 'currency', currency)
            const localVarPath = `/latest/{currency}`
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets list of supported currencies by the external API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supportedCurrenciesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/supported-currencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets historical currency data between two dates (inclusive) for two currencies
         * @param {string} startDate Start date for the query, format YYYY-MM-DD
         * @param {string} endDate End date for the query, format YYYY-MM-DD
         * @param {string} baseCurrency Currency that you want to get data for, e.g. USD, EUR
         * @param {string} targetCurrency Currency that you want to get data for, e.g. USD, EUR
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async historyGet(startDate: string, endDate: string, baseCurrency: string, targetCurrency: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HistoryGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.historyGet(startDate, endDate, baseCurrency, targetCurrency, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.historyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets latest currency data
         * @param {string} currency Currency that you want to get data for, e.g. USD, EUR
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async latestCurrencyGet(currency: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LatestCurrencyGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.latestCurrencyGet(currency, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.latestCurrencyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets list of supported currencies by the external API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async supportedCurrenciesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.supportedCurrenciesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.supportedCurrenciesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Gets historical currency data between two dates (inclusive) for two currencies
         * @param {string} startDate Start date for the query, format YYYY-MM-DD
         * @param {string} endDate End date for the query, format YYYY-MM-DD
         * @param {string} baseCurrency Currency that you want to get data for, e.g. USD, EUR
         * @param {string} targetCurrency Currency that you want to get data for, e.g. USD, EUR
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historyGet(startDate: string, endDate: string, baseCurrency: string, targetCurrency: string, options?: RawAxiosRequestConfig): AxiosPromise<HistoryGet200Response> {
            return localVarFp.historyGet(startDate, endDate, baseCurrency, targetCurrency, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets latest currency data
         * @param {string} currency Currency that you want to get data for, e.g. USD, EUR
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        latestCurrencyGet(currency: string, options?: RawAxiosRequestConfig): AxiosPromise<LatestCurrencyGet200Response> {
            return localVarFp.latestCurrencyGet(currency, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets list of supported currencies by the external API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supportedCurrenciesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.supportedCurrenciesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Gets historical currency data between two dates (inclusive) for two currencies
     * @param {string} startDate Start date for the query, format YYYY-MM-DD
     * @param {string} endDate End date for the query, format YYYY-MM-DD
     * @param {string} baseCurrency Currency that you want to get data for, e.g. USD, EUR
     * @param {string} targetCurrency Currency that you want to get data for, e.g. USD, EUR
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public historyGet(startDate: string, endDate: string, baseCurrency: string, targetCurrency: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).historyGet(startDate, endDate, baseCurrency, targetCurrency, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets latest currency data
     * @param {string} currency Currency that you want to get data for, e.g. USD, EUR
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public latestCurrencyGet(currency: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).latestCurrencyGet(currency, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets list of supported currencies by the external API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public supportedCurrenciesGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).supportedCurrenciesGet(options).then((request) => request(this.axios, this.basePath));
    }
}



